-- Enum Types (if your RDBMS supports them, otherwise use VARCHAR with CHECK constraints)
-- CREATE TYPE user_role_enum AS ENUM ('recruiter', 'admin', 'job_seeker');
-- CREATE TYPE job_type_enum AS ENUM ('full_time', 'part_time', 'contract', 'internship', 'temporary');
-- CREATE TYPE work_model_enum AS ENUM ('on_site', 'remote', 'hybrid');
-- CREATE TYPE salary_type_enum AS ENUM ('hourly', 'monthly', 'annual');
-- CREATE TYPE application_status_enum AS ENUM ('applied', 'viewed', 'shortlisted', 'interviewing', 'rejected', 'hired', 'withdrawn');
-- CREATE TYPE job_status_enum AS ENUM ('draft', 'open', 'closed', 'filled', 'expired');
-- CREATE TYPE subscription_status_enum AS ENUM ('active', 'pending_payment', 'expired', 'cancelled');

-- 1. Users Table
CREATE TABLE Users (
    user_id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- Or SERIAL/BIGSERIAL for integer IDs
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    role VARCHAR(20) NOT NULL, -- Consider ENUM: 'recruiter', 'admin', ('job_seeker' if platform expands)
    -- role user_role_enum NOT NULL, -- if using ENUM
    is_active BOOLEAN DEFAULT TRUE,
    email_verified_at TIMESTAMP,
    last_login_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 2. Companies Table
CREATE TABLE Companies (
    company_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    website VARCHAR(255),
    description TEXT,
    logo_url VARCHAR(255),
    banner_url VARCHAR(255),
    founded_year SMALLINT,
    company_size VARCHAR(50), -- e.g., "1-10 employees", "10000+ employees"
    -- headquarters_location_id UUID, -- If you want a specific HQ location from Locations table
    -- FOREIGN KEY (headquarters_location_id) REFERENCES Locations(location_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_verified BOOLEAN DEFAULT FALSE -- Admin can verify companies
);

-- 3. RecruiterProfiles Table (Links Users to Companies)
CREATE TABLE RecruiterProfiles (
    recruiter_profile_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID UNIQUE NOT NULL, -- A user can only have one recruiter profile
    company_id UUID NOT NULL,
    job_title VARCHAR(100), -- Recruiter's title at the company
    phone_number VARCHAR(20),
    linkedin_profile_url VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE RESTRICT -- Don't delete company if recruiters are linked
);

-- 4. Industries Table (Master List)
CREATE TABLE Industries (
    industry_id SERIAL PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT
);

-- 5. CompanyIndustries (Junction table if a company can belong to multiple industries)
CREATE TABLE CompanyIndustries (
    company_id UUID NOT NULL,
    industry_id INT NOT NULL,
    PRIMARY KEY (company_id, industry_id),
    FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,
    FOREIGN KEY (industry_id) REFERENCES Industries(industry_id) ON DELETE CASCADE
);

-- 6. Locations Table (Master List - can be city, state, country level)
CREATE TABLE Locations (
    location_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    city VARCHAR(100),
    state_province VARCHAR(100),
    country VARCHAR(100) NOT NULL,
    postal_code VARCHAR(20),
    latitude DECIMAL(9,6),
    longitude DECIMAL(9,6),
    UNIQUE (city, state_province, country, postal_code) -- Ensure unique locations
);

-- 7. JobPostings Table
CREATE TABLE JobPostings (
    job_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    company_id UUID NOT NULL,
    posted_by_recruiter_id UUID NOT NULL, -- RecruiterProfile ID
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    responsibilities TEXT,
    qualifications TEXT,
    benefits TEXT,
    job_type VARCHAR(20) NOT NULL, -- Consider ENUM: 'full_time', 'part_time', 'contract', 'internship'
    -- job_type job_type_enum NOT NULL,
    work_model VARCHAR(20) NOT NULL, -- Consider ENUM: 'on_site', 'remote', 'hybrid'
    -- work_model work_model_enum NOT NULL,
    experience_level VARCHAR(50), -- e.g., "Entry", "Mid-Level", "Senior", "Lead"
    salary_min DECIMAL(12, 2),
    salary_max DECIMAL(12, 2),
    salary_type VARCHAR(10), -- Consider ENUM: 'hourly', 'annual'
    -- salary_type salary_type_enum,
    salary_currency CHAR(3) DEFAULT 'USD',
    application_deadline TIMESTAMP,
    posted_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expiry_date TIMESTAMP, -- When the job listing should automatically be taken down
    status VARCHAR(20) DEFAULT 'draft', -- Consider ENUM: 'draft', 'open', 'closed', 'filled', 'expired'
    -- status job_status_enum DEFAULT 'draft',
    is_featured BOOLEAN DEFAULT FALSE,
    external_application_url VARCHAR(255), -- If applications are handled externally
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,
    FOREIGN KEY (posted_by_recruiter_id) REFERENCES RecruiterProfiles(recruiter_profile_id) ON DELETE CASCADE
);

-- 8. JobLocations (Junction table: A job can be available in multiple locations, or be remote)
CREATE TABLE JobLocations (
    job_id UUID NOT NULL,
    location_id UUID NOT NULL,
    is_primary BOOLEAN DEFAULT FALSE, -- If a job has a primary office location even if hybrid/remote options exist
    PRIMARY KEY (job_id, location_id),
    FOREIGN KEY (job_id) REFERENCES JobPostings(job_id) ON DELETE CASCADE,
    FOREIGN KEY (location_id) REFERENCES Locations(location_id) ON DELETE CASCADE
);
-- Note: For fully remote jobs, you might not add entries here, or have a special "Remote" location_id,
-- or rely solely on the `work_model` in `JobPostings`.

-- 9. Skills Table (Master List)
CREATE TABLE Skills (
    skill_id SERIAL PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL,
    category VARCHAR(100) -- e.g., "Programming Language", "Software", "Soft Skill"
);

-- 10. JobSkills (Junction table: Skills required for a job)
CREATE TABLE JobSkills (
    job_id UUID NOT NULL,
    skill_id INT NOT NULL,
    proficiency_level_required VARCHAR(50), -- e.g., "Basic", "Intermediate", "Expert" (Optional)
    is_mandatory BOOLEAN DEFAULT TRUE,
    PRIMARY KEY (job_id, skill_id),
    FOREIGN KEY (job_id) REFERENCES JobPostings(job_id) ON DELETE CASCADE,
    FOREIGN KEY (skill_id) REFERENCES Skills(skill_id) ON DELETE CASCADE
);

-- 11. SubscriptionPlans Table (For monetization)
CREATE TABLE SubscriptionPlans (
    plan_id SERIAL PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    billing_cycle VARCHAR(20) NOT NULL, -- e.g., 'monthly', 'annually'
    job_post_limit INT, -- NULL for unlimited
    featured_job_limit INT,
    candidate_search_access BOOLEAN DEFAULT FALSE,
    duration_days INT, -- e.g., 30 for monthly, 365 for annual
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE, -- If plan is available for new subscriptions
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 12. CompanySubscriptions Table (Which company has which plan)
CREATE TABLE CompanySubscriptions (
    company_subscription_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    company_id UUID NOT NULL,
    plan_id INT NOT NULL,
    start_date TIMESTAMP NOT NULL,
    end_date TIMESTAMP NOT NULL,
    status VARCHAR(20) NOT NULL, -- Consider ENUM: 'active', 'pending_payment', 'expired', 'cancelled'
    -- status subscription_status_enum NOT NULL,
    payment_transaction_id VARCHAR(255), -- Link to payment gateway transaction
    auto_renew BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE,
    FOREIGN KEY (plan_id) REFERENCES SubscriptionPlans(plan_id) ON DELETE RESTRICT
);

-- If you add Job Seekers and Applications:
--
-- CREATE TABLE JobSeekerProfiles (
--     seeker_profile_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
--     user_id UUID UNIQUE NOT NULL,
--     resume_url VARCHAR(255),
--     portfolio_url VARCHAR(255),
--     linkedin_profile_url VARCHAR(255),
--     phone_number VARCHAR(20),
--     bio TEXT,
--     current_job_title VARCHAR(100),
--     current_company VARCHAR(100),
--     desired_salary_min DECIMAL(12,2),
--     desired_salary_max DECIMAL(12,2),
--     desired_job_types VARCHAR(255), -- Comma-separated or use a junction table
--     preferred_work_models VARCHAR(255), -- Comma-separated or use a junction table
--     job_search_status VARCHAR(50), -- e.g., 'actively_looking', 'passively_looking', 'not_looking'
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE
-- );
--
-- CREATE TABLE SeekerSkills (
--     seeker_profile_id UUID NOT NULL,
--     skill_id INT NOT NULL,
--     proficiency_level VARCHAR(50), -- e.g., "Beginner", "Intermediate", "Advanced", "Expert"
--     years_of_experience SMALLINT,
--     PRIMARY KEY (seeker_profile_id, skill_id),
--     FOREIGN KEY (seeker_profile_id) REFERENCES JobSeekerProfiles(seeker_profile_id) ON DELETE CASCADE,
--     FOREIGN KEY (skill_id) REFERENCES Skills(skill_id) ON DELETE CASCADE
-- );
--
-- CREATE TABLE Applications (
--     application_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
--     job_id UUID NOT NULL,
--     seeker_profile_id UUID NOT NULL,
--     application_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     status VARCHAR(20) NOT NULL, -- Consider ENUM: 'applied', 'viewed', 'shortlisted', 'interviewing', 'rejected', 'hired', 'withdrawn'
--     -- status application_status_enum NOT NULL,
--     cover_letter_text TEXT,
--     resume_snapshot_url VARCHAR(255), -- Store a copy of the resume at time of application
--     notes_by_recruiter TEXT,
--     notes_by_seeker TEXT, -- Private notes
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     UNIQUE (job_id, seeker_profile_id), -- A seeker can apply to a job only once
--     FOREIGN KEY (job_id) REFERENCES JobPostings(job_id) ON DELETE CASCADE,
--     FOREIGN KEY (seeker_profile_id) REFERENCES JobSeekerProfiles(seeker_profile_id) ON DELETE CASCADE
-- );
--
-- CREATE TABLE Messages (
--     message_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
--     sender_id UUID NOT NULL, -- User ID
--     receiver_id UUID NOT NULL, -- User ID
--     application_id UUID, -- Optional: If message is related to a specific application
--     content TEXT NOT NULL,
--     sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     is_read BOOLEAN DEFAULT FALSE,
--     read_at TIMESTAMP,
--     FOREIGN KEY (sender_id) REFERENCES Users(user_id) ON DELETE SET NULL, -- Keep message even if sender is deleted
--     FOREIGN KEY (receiver_id) REFERENCES Users(user_id) ON DELETE SET NULL, -- Keep message even if receiver is deleted
--     FOREIGN KEY (application_id) REFERENCES Applications(application_id) ON DELETE SET NULL
-- );
--
-- CREATE TABLE Notifications (
--     notification_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
--     user_id UUID NOT NULL, -- The user to be notified
--     type VARCHAR(50) NOT NULL, -- e.g., 'new_application', 'application_status_change', 'new_message', 'job_expiry_warning'
--     related_entity_id UUID, -- e.g., application_id, job_id, message_id
--     content TEXT NOT NULL,
--     is_read BOOLEAN DEFAULT FALSE,
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     link_url VARCHAR(255), -- URL to navigate to when notification is clicked
--     FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE
-- );